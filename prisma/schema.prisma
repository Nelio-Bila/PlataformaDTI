// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth models
model Account {
  id                String  @id @default(uuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// User model updated for NextAuth and groups
model User {
  id               String      @id @default(uuid())
  name             String?
  email            String?     @unique
  emailVerified    DateTime?   @map("email_verified")
  image            String?
  password         String? // Optional for credential auth; null for OAuth
  created_at       DateTime    @default(now())
  updated_at       DateTime    @updatedAt
  accounts         Account[]
  sessions         Session[]
  groups           UserGroup[] // Many-to-many with Group
  Equipment        Equipment[]
  requestsMade     Request[]   @relation(name: "RequestsMade") // Requests this user has made
  requestsApproved Request[]   @relation(name: "RequestsApproved") // Requests this user has approved

  @@map("users")
}

// Group model for role-based access
model Group {
  id          String            @id @default(uuid())
  name        String            @unique // e.g., "Admins", "Technicians"
  description String?
  users       UserGroup[] // Many-to-many with User
  permissions GroupPermission[] // Many-to-many with Permission
  created_at  DateTime          @default(now())
  updated_at  DateTime          @updatedAt
}

// Permission model for specific access rights
model Permission {
  id          String            @id @default(uuid())
  name        String            @unique // e.g., "equipment:read", "equipment:write"
  description String?
  groups      GroupPermission[] // Many-to-many with Group
  created_at  DateTime          @default(now())
  updated_at  DateTime          @updatedAt
}

// Junction table for User-Group relationship
model UserGroup {
  user_id     String
  group_id    String
  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  group       Group    @relation(fields: [group_id], references: [id], onDelete: Cascade)
  assigned_at DateTime @default(now())

  @@id([user_id, group_id])
  @@map("user_groups")
}

// Junction table for Group-Permission relationship
model GroupPermission {
  group_id      String
  permission_id String
  group         Group      @relation(fields: [group_id], references: [id], onDelete: Cascade)
  permission    Permission @relation(fields: [permission_id], references: [id], onDelete: Cascade)
  assigned_at   DateTime   @default(now())

  @@id([group_id, permission_id])
  @@map("group_permissions")
}
model Direction {
  id          String       @id @default(uuid())
  name        String
  departments Department[]
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  Equipment   Equipment[]
  services    Service[]
  requester_requests   Request[]  @relation(name: "RequesterDirection")
  destination_requests Request[]  @relation(name: "DestinationDirection")
}

model Department {
  id            String        @id @default(uuid())
  name          String
  direction_id  String
  direction     Direction     @relation(fields: [direction_id], references: [id])
  sectors       Sector[]
  repartitions  Repartition[]
  services      Service[]
  equipment     Equipment[]
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt
  requester_requests   Request[]  @relation(name: "RequesterDepartment")
  destination_requests Request[]  @relation(name: "DestinationDepartment")
}

model Service {
  id            String      @id @default(uuid())
  name          String
  department_id String?
  direction_id  String?
  department    Department? @relation(fields: [department_id], references: [id])
  direction     Direction?  @relation(fields: [direction_id], references: [id])
  equipment     Equipment[]
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt
  Sector        Sector[]
  requester_requests   Request[]  @relation(name: "RequesterService")
  destination_requests Request[]  @relation(name: "DestinationService")
}

model Sector {
  id            String      @id @default(uuid())
  name          String
  department_id String?     // Optional relationship with Department
  service_id    String?     // Optional relationship with Service
  department    Department? @relation(fields: [department_id], references: [id])
  service       Service?    @relation(fields: [service_id], references: [id])
  equipment     Equipment[]
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt
  requester_requests   Request[]  @relation(name: "RequesterSector")
  destination_requests Request[]  @relation(name: "DestinationSector")

  @@unique([department_id, service_id]) // Ensure a sector can't belong to both a department and a service simultaneously
}

model Repartition {
  id            String      @id @default(uuid())
  name          String
  department_id String
  department    Department  @relation(fields: [department_id], references: [id])
  equipment     Equipment[]
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt
  requester_requests   Request[]  @relation(name: "RequesterRepartition")
  destination_requests Request[]  @relation(name: "DestinationRepartition")
}

model Equipment {
  id             String           @id @default(uuid())
  serial_number  String?          @unique
  type           String
  brand          String
  model          String
  purchase_date  DateTime?
  warranty_end   DateTime?
  status         String // e.g., "ACTIVE", "MAINTENANCE", "RETIRED"
  direction_id   String?
  department_id  String?
  sector_id      String?
  service_id     String?
  repartition_id String?
  registered_by  String? // New field to store the user ID
  direction      Direction?       @relation(fields: [direction_id], references: [id])
  department     Department?      @relation(fields: [department_id], references: [id])
  sector         Sector?          @relation(fields: [sector_id], references: [id])
  service        Service?         @relation(fields: [service_id], references: [id])
  repartition    Repartition?     @relation(fields: [repartition_id], references: [id])
  registeredBy   User?            @relation(fields: [registered_by], references: [id]) // New relation to User
  images         EquipmentImage[]
  created_at     DateTime         @default(now())
  updated_at     DateTime         @updatedAt
}

model EquipmentImage {
  id                   String    @id @default(uuid())
  equipment_id         String
  cloudinary_public_id String?
  url                  String // URL to the image (e.g., S3 link)
  description          String? // Optional description of the image
  created_at           DateTime  @default(now())
  equipment            Equipment @relation(fields: [equipment_id], references: [id], onDelete: Cascade)

  @@map("equipment_images")
}



// Enum for Request Status
enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

// Enum for Request Type (e.g., requisition, return, or substitution)
enum RequestType {
  REQUISITION
  RETURN
  SUBSTITUTION
}

// Request model to track service/product requests
model Request {
  id                    String        @id @default(uuid())
  request_number        String        @unique // e.g., "000124" from the form
  type                  RequestType   // REQUISITION, RETURN, SUBSTITUTION
  status                RequestStatus @default(PENDING)
  requester_id          String?       // Optional: Not required if unauthenticated
  requester_name        String?       // Store the name of the requester if unauthenticated
  requester             User?         @relation(name: "RequestsMade", fields: [requester_id], references: [id], onDelete: Cascade)

  // Requester's organizational units
  requester_direction_id   String?
  requester_department_id  String?
  requester_service_id     String?
  requester_sector_id      String?
  requester_repartition_id String?
  requester_direction      Direction?    @relation(name: "RequesterDirection", fields: [requester_direction_id], references: [id])
  requester_department     Department?   @relation(name: "RequesterDepartment", fields: [requester_department_id], references: [id])
  requester_service        Service?      @relation(name: "RequesterService", fields: [requester_service_id], references: [id])
  requester_sector         Sector?       @relation(name: "RequesterSector", fields: [requester_sector_id], references: [id])
  requester_repartition    Repartition?  @relation(name: "RequesterRepartition", fields: [requester_repartition_id], references: [id])

  // Destination organizational units
  destination_direction_id   String?
  destination_department_id  String?
  destination_service_id     String?
  destination_sector_id      String?
  destination_repartition_id String?
  destination_direction      Direction?    @relation(name: "DestinationDirection", fields: [destination_direction_id], references: [id])
  destination_department     Department?   @relation(name: "DestinationDepartment", fields: [destination_department_id], references: [id])
  destination_service        Service?      @relation(name: "DestinationService", fields: [destination_service_id], references: [id])
  destination_sector         Sector?       @relation(name: "DestinationSector", fields: [destination_sector_id], references: [id])
  destination_repartition    Repartition?  @relation(name: "DestinationRepartition", fields: [destination_repartition_id], references: [id])

  items                 RequestItem[] // One request can have multiple items
  created_at            DateTime      @default(now())
  updated_at            DateTime      @updatedAt
  approved_by           String?       // Optional field for the approver's user ID
  approver              User?         @relation(name: "RequestsApproved", fields: [approved_by], references: [id])
  comments              String?       @db.Text // For any additional notes
}

// RequestItem model to handle individual items in a request
model RequestItem {
  id            String    @id @default(uuid())
  request_id    String
  request       Request   @relation(fields: [request_id], references: [id], onDelete: Cascade)
  description   String    // e.g., "Pedidos de Reparos de PC Computador"
  quantity      Int       // e.g., "1 UM" (1 unit)
  unit          String?   // e.g., "UM" (unit of measure)
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
}